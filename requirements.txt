# ============================================================================
# AI ASSISTANT - REQUIREMENTS.txt (Raspberry Pi 5 Optimized)
# Comprehensive dependency list for deployment-ready Raspberry Pi 5 installation
# ARM64 optimized with pre-compiled wheels and performance enhancements
# ============================================================================

# Core AI and OpenAI Dependencies
openai>=1.3.0
python-dotenv>=1.0.0

# Speech Recognition and Audio Processing
SpeechRecognition>=3.10.0
pyttsx3>=2.90
pyaudio>=0.2.13

# Audio Libraries and Sound Processing (ARM64 optimized)
pygame>=2.5.2
numpy>=1.24.3,<2.0.0  # Fixed for ARM64 compatibility
scipy>=1.10.0  # Better ARM64 support

# Computer Vision and Camera (Raspberry Pi 5 optimized)
opencv-python-headless==4.8.1.78  # Headless for better Pi 5 performance
Pillow>=10.0.0  # Latest with ARM64 optimizations

# Face Recognition (CPU optimized for Raspberry Pi 5)
face-recognition>=1.3.0
dlib>=19.24.0

# Object Detection (YOLO with ARM64 support)
ultralytics>=8.0.196
torch>=2.1.0  # Better ARM64 support for Pi 5
torchvision>=0.16.0  # Compatible with torch 2.1+
torchaudio>=2.1.0  # Added for complete torch ecosystem

# Wake Word Detection (Optional - requires Picovoice account)
pvporcupine>=3.0.0

# Raspberry Pi GPIO and Hardware (Linux only)
RPi.GPIO>=0.7.1; sys_platform == "linux"
gpiozero>=1.6.2; sys_platform == "linux"  # Modern GPIO library

# System Utilities and Monitoring
psutil>=5.9.0
requests>=2.31.0
urllib3>=2.0.0  # Security updates

# Text Processing and Analysis
difflib; python_version >= "3.0"  # Built-in, ensure availability
typing-extensions>=4.0.0  # Better type hints support
pathlib; python_version >= "3.4"  # Built-in, ensure availability

# Performance and Memory Management
cachetools>=5.0.0  # Efficient caching for AI responses
memory-profiler>=0.60.0  # Memory optimization monitoring

# Additional Audio Dependencies for Pi 5
sounddevice>=0.4.6  # Alternative audio interface
soundfile>=0.12.1  # Audio file processing

# ============================================================================
# RASPBERRY PI 5 DEPLOYMENT OPTIMIZATION NOTES
# ============================================================================
#
# SYSTEM PREPARATION (Run these commands on Pi 5 before installation):
#
# 1. Update and prepare system:
#    sudo apt update && sudo apt upgrade -y
#    sudo apt install -y python3-pip python3-dev python3-venv python3-setuptools
#
# 2. Install ARM64 optimized system dependencies:
#    sudo apt install -y build-essential cmake pkg-config git
#    sudo apt install -y libatlas-base-dev libopenblas-dev liblapack-dev
#    sudo apt install -y libblas-dev gfortran libhdf5-dev
#    sudo apt install -y portaudio19-dev libasound2-dev pulseaudio
#    sudo apt install -y libavcodec-dev libavformat-dev libswscale-dev
#    sudo apt install -y libgtk-3-dev libcanberra-gtk3-dev
#    sudo apt install -y libjpeg-dev libtiff5-dev libpng-dev
#    sudo apt install -y libv4l-dev v4l-utils libdc1394-22-dev
#    sudo apt install -y libxine2-dev libfaac-dev libmp3lame-dev
#    sudo apt install -y libopencore-amrnb-dev libopencore-amrwb-dev
#    sudo apt install -y libtheora-dev libvorbis-dev libxvidcore-dev
#    sudo apt install -y x264 v4l-utils libgstreamer1.0-dev
#    sudo apt install -y libgstreamer-plugins-base1.0-dev
#
# 3. Increase swap memory for compilation (Pi 5 specific):
#    sudo dphys-swapfile swapoff
#    sudo sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=2048/' /etc/dphys-swapfile
#    sudo dphys-swapfile setup && sudo dphys-swapfile swapon
#
# 4. Create optimized Python environment:
#    python3 -m venv ai_assistant_env
#    source ai_assistant_env/bin/activate
#    pip install --upgrade pip setuptools wheel
#
# 5. Set compilation flags for ARM64 optimization:
#    export MAKEFLAGS="-j4"  # Pi 5 has 4 cores
#    export CFLAGS="-O3 -mcpu=cortex-a76"  # Pi 5 specific CPU optimization
#    export CXXFLAGS="-O3 -mcpu=cortex-a76"
#
# 6. Install with ARM64 optimizations:
#    pip install --no-cache-dir --extra-index-url https://www.piwheels.org/simple/ -r requirements.txt
#
# ============================================================================
# RASPBERRY PI 5 SPECIFIC OPTIMIZATIONS
# ============================================================================
#
# Performance Tuning for Pi 5:
#
# 1. GPU Memory Split (add to /boot/config.txt):
#    gpu_mem=128
#    arm_64bit=1
#    dtoverlay=vc4-kms-v3d
#
# 2. CPU Governor for Performance:
#    echo 'performance' | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
#
# 3. Camera Configuration (Pi 5 with libcamera):
#    libcamera is installed via apt, not pip:
#    sudo apt install libcamera-apps libcamera-dev python3-libcamera
#    Our IMX500CameraHandler uses libcamera command-line tools directly
#
# 4. Audio Configuration for Pi 5:
#    sudo tee -a /boot/config.txt << EOF
#    dtparam=audio=on
#    audio_pwm_mode=2
#    EOF
#
# 5. Memory Management:
#    # Add to /etc/sysctl.conf
#    vm.swappiness=10
#    vm.vfs_cache_pressure=50
#
# ============================================================================
# ARM64 SPECIFIC INSTALLATION COMMANDS
# ============================================================================
#
# For optimal Pi 5 performance, install in this order:
#
# 1. Core dependencies first:
#    pip install --no-cache-dir numpy==1.24.3
#    pip install --no-cache-dir scipy>=1.10.0
#
# 2. PyTorch with ARM64 optimization:
#    pip install --no-cache-dir torch==2.1.0 torchvision==0.16.0 \
#        --extra-index-url https://download.pytorch.org/whl/cpu
#
# 3. Computer Vision with headless OpenCV:
#    pip install --no-cache-dir opencv-python-headless==4.8.1.78
#    pip install --no-cache-dir Pillow>=10.0.0
#
# 4. Face Recognition (may take 30+ minutes on Pi 5):
#    export MAKEFLAGS="-j2"  # Reduce to 2 cores to prevent overheating
#    pip install --no-cache-dir dlib>=19.24.0
#    pip install --no-cache-dir face-recognition>=1.3.0
#
# 5. Audio processing:
#    sudo apt install -y python3-pyaudio  # System package first
#    pip install --no-cache-dir pygame>=2.5.2
#    pip install --no-cache-dir SpeechRecognition>=3.10.0
#    pip install --no-cache-dir pyttsx3>=2.90
#
# ============================================================================
# TROUBLESHOOTING COMMON PI 5 DEPLOYMENT ISSUES
# ============================================================================
#
# 1. "No module named '_ctypes'" error:
#    sudo apt install -y libffi-dev
#    pip install --upgrade cffi
#
# 2. OpenCV import errors:
#    sudo apt install -y python3-opencv
#    pip uninstall opencv-python opencv-python-headless
#    pip install --no-cache-dir opencv-python-headless==4.8.1.78
#
# 3. PyAudio installation failures:
#    sudo apt install -y portaudio19-dev python3-pyaudio
#    pip install --no-cache-dir --force-reinstall pyaudio
#
# 4. dlib compilation timeout:
#    export MAKEFLAGS="-j1"  # Single thread compilation
#    pip install --no-cache-dir --verbose dlib
#
# 5. Memory errors during installation:
#    # Increase swap to 4GB temporarily
#    sudo dphys-swapfile swapoff
#    sudo sed -i 's/CONF_SWAPSIZE=.*/CONF_SWAPSIZE=4096/' /etc/dphys-swapfile
#    sudo dphys-swapfile setup && sudo dphys-swapfile swapon
#
# 6. Camera access issues on Pi 5:
#    sudo usermod -a -G video,dialout $USER
#    # Reboot required after user group changes
#
# 7. Audio device not found:
#    # Test audio devices
#    aplay -l
#    alsamixer
#    # Configure default audio output
#    sudo raspi-config  # Advanced Options > Audio
#
# ============================================================================
# DEPLOYMENT VERIFICATION CHECKLIST
# ============================================================================
#
# Run these tests after installation to verify deployment readiness:
#
# 1. Python import test:
#    python3 -c "
#    import openai, cv2, pygame, numpy, torch, ultralytics
#    import speech_recognition, pyttsx3, face_recognition
#    print('✅ All core modules imported successfully')
#    "
#
# 2. Camera test:
#    python3 -c "
#    import cv2
#    cap = cv2.VideoCapture(0)
#    ret, frame = cap.read()
#    print('✅ Camera working' if ret else '❌ Camera failed')
#    cap.release()
#    "
#
# 3. Audio test:
#    python3 -c "
#    import pygame
#    pygame.mixer.init()
#    print('✅ Audio system initialized')
#    "
#
# 4. Face recognition test:
#    python3 -c "
#    import face_recognition
#    print('✅ Face recognition available')
#    "
#
# 5. Object detection test:
#    python3 -c "
#    from ultralytics import YOLO
#    model = YOLO('yolov8n.pt')
#    print('✅ YOLO model loaded')
#    "
#
# 6. GPU acceleration test (if available):
#    python3 -c "
#    import torch
#    print(f'CUDA available: {torch.cuda.is_available()}')
#    print(f'MPS available: {torch.backends.mps.is_available()}')
#    "
#
# ============================================================================
# PRODUCTION DEPLOYMENT SETTINGS
# ============================================================================
#
# Environment Variables for Production (.env file):
#
# # OpenAI Configuration
# OPENAI_API_KEY=your_api_key_here
# OPENAI_MODEL=gpt-3.5-turbo
# OPENAI_MAX_TOKENS=150
# OPENAI_TEMPERATURE=0.7
#
# # Performance Settings for Pi 5
# PI_OPTIMIZATION=true
# CAMERA_RESOLUTION_WIDTH=640
# CAMERA_RESOLUTION_HEIGHT=480
# CAMERA_FPS=15
# AUDIO_SAMPLE_RATE=16000
# AUDIO_CHUNK_SIZE=1024
#
# # Resource Management
# MAX_CONCURRENT_OPERATIONS=2
# FACE_RECOGNITION_THRESHOLD=0.6
# OBJECT_DETECTION_CONFIDENCE=0.5
#
# # Logging Configuration
# LOG_LEVEL=INFO
# LOG_FILE=/var/log/ai_assistant.log
#
# ============================================================================
# SYSTEMD SERVICE CONFIGURATION (Optional)
# ============================================================================
#
# Create a systemd service for automatic startup:
#
# sudo tee /etc/systemd/system/ai-assistant.service << EOF
# [Unit]
# Description=AI Assistant Service
# After=network.target sound.target
# Wants=network.target
#
# [Service]
# Type=simple
# User=pi
# WorkingDirectory=/home/pi/ai_assistant
# Environment=PATH=/home/pi/ai_assistant/ai_assistant_env/bin
# ExecStart=/home/pi/ai_assistant/ai_assistant_env/bin/python main.py
# Restart=always
# RestartSec=10
#
# [Install]
# WantedBy=multi-user.target
# EOF
#
# sudo systemctl daemon-reload
# sudo systemctl enable ai-assistant.service
# sudo systemctl start ai-assistant.service
#
# ============================================================================
# AITRIOS AI Camera Support (Raspberry Pi specific)
# ============================================================================
#
# These packages are typically installed via the Sony AITRIOS SDK
# or Raspberry Pi system packages, but we list them for reference
picamera2>=0.3.12  # For Raspberry Pi camera control

# Note: libcamera for Raspberry Pi is installed via system packages, not pip:
# sudo apt install libcamera-apps libcamera-dev python3-libcamera
# Our IMX500CameraHandler uses libcamera command-line tools directly

# IMX500 AI models are installed via Sony SDK or system packages:
# imx500-models>=1.0.0  # IMX500 AI models (installed via Sony SDK)

# Edge TPU and AI acceleration (optional)
tflite-runtime>=2.13.0  # TensorFlow Lite runtime
pycoral>=2.0.0         # Coral Edge TPU support (optional)

# Audio processing
sounddevice==0.4.6
pyaudio==0.2.11
pydub==0.25.1
whisper==1.1.10
speech-recognition==3.10.0

# Text-to-Speech
pyttsx3==2.90
gTTS==2.3.2

# Networking and Communication
websockets==12.0
flask==3.0.0
socketio==5.9.0

# Data processing and utilities
pandas==2.1.3
matplotlib==3.8.2
scipy==1.11.4
scikit-learn==1.3.2
cryptography==41.0.7
pyyaml==6.0.1

# Database
sqlite3  # Built into Python
sqlalchemy==2.0.23

# Game development (for interactive features)
pygame==2.5.2

# Computer Vision extras
mediapipe==0.10.8
imutils==0.5.4

# Hardware interfaces
RPi.GPIO>=0.7.1  # Raspberry Pi GPIO (Pi only)
gpiozero>=1.6.2  # GPIO Zero library (Pi only)
adafruit-circuitpython-motor>=3.4.8  # Motor control
adafruit-circuitpython-servokit>=1.3.15  # Servo control

# Serial communication
pyserial==3.5

# JSON and configuration
jsonschema==4.19.2
configparser  # Built into Python

# Logging and monitoring
colorlog==6.8.0
psutil==5.9.6

# Development and testing
pytest==7.4.3
pytest-asyncio==0.21.1
black==23.11.0
flake8==6.1.0

# Installation notes for AITRIOS:
# 1. Install Sony AITRIOS SDK following official documentation
# 2. Install Raspberry Pi OS Bookworm or later
# 3. Enable camera interface in raspi-config
# 4. Install IMX500 model files via Sony's package manager
# 5. Ensure proper permissions for camera access

# Example system commands (run separately):
# sudo apt update && sudo apt upgrade -y
# sudo apt install python3-libcamera python3-kms++
# sudo raspi-config  # Enable camera
# wget -O - https://archive.raspberrypi.org/debian/raspberrypi.gpg.key | sudo apt-key add -
# echo "deb https://archive.raspberrypi.org/debian/ bullseye main" | sudo tee /etc/apt/sources.list.d/raspi.list

# Sony AITRIOS specific (follow official Sony documentation):
# Install AITRIOS SDK for Vision and Sensing
# Configure device certificates and connection settings
# Download and install IMX500 AI models 